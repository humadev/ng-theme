{"version":3,"file":"context-menu.directive.js","sourceRoot":"","sources":["context-menu.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Directive,\n    Input,\n    Output,\n    EventEmitter,\n    HostListener,\n    Renderer2,\n    ElementRef\n} from '@angular/core';\nimport { ContextMenuPanelComponent } from './context-menu-panel.component';\nimport { ContextMenu } from './context-menu';\nimport {\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    CdkOverlayOrigin\n} from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ContextMenuService } from './context-menu.service';\n\n@Directive({\n    selector: '[hdContextMenu]'\n})\nexport class ContextMenuDirective {\n    @Output() hdContextMenu = new EventEmitter();\n    @Input() menuID: any; // id dari row yg diklik kanan\n    @Input() menuItem: [ContextMenu]; // data menu yg akan ditampikan, data ini sesuai dengan interface framework contextmenu\n    @Input() contextMenuOrigin: CdkOverlayOrigin;\n    panel: any;\n    clickWatcher$: any;\n    overlayRef: OverlayRef;\n    active = false;\n\n    constructor(\n        private ref: ElementRef,\n        private render: Renderer2,\n        public overlay: Overlay,\n        private _service: ContextMenuService\n    ) {\n        render.setStyle(ref.nativeElement, 'cursor', 'context-menu'); // add context-menu cursor to element used this directive\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onContextMenu(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        this._service.closeAllContextMenus();\n        const refs = this._service.getRef();\n        if (refs) {\n            refs.forEach((ref, index) => {\n                this.render.removeClass(ref.nativeElement, 'hd-contextmenu-active');\n            });\n        }\n        this._service.destroyAllRef();\n        this.displayCallback();\n        this._service.setRef(this.ref);\n        this.render.addClass(this.ref.nativeElement, 'hd-contextmenu-active'); // coloring row with class\n        this.createPanel(event);\n        this.addPanelItem();\n        this.watchItemClick();\n        this.outsideListener();\n    }\n\n    private createPanel(event): void {\n        const positionStrategy = this.overlay\n            .position()\n            .flexibleConnectedTo(event.target).withPositions([{\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n                offsetX: event.offsetX,\n                offsetY: event.offsetY\n            }, {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'end',\n                overlayY: 'top',\n                offsetX: event.offsetX,\n                offsetY: event.offsetY\n            }, {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n                offsetX: event.offsetX,\n                offsetY: event.offsetY\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n                offsetX: event.offsetX,\n                offsetY: event.offsetY\n            }\n            ]).withGrowAfterOpen(true).withViewportMargin(10).withFlexibleDimensions(true);\n\n        const config: OverlayConfig = new OverlayConfig({\n            positionStrategy: positionStrategy,\n            scrollStrategy: this.overlay.scrollStrategies.close()\n        });\n        this.overlayRef = this.overlay.create(config);\n        this._service.setContextMenuOverlay(this.overlayRef);\n        const contextMenu = new ComponentPortal(ContextMenuPanelComponent);\n        this.panel = this.overlayRef.attach(contextMenu);\n\n        this.active = true;\n    }\n\n    private addPanelItem(): void {\n        this.panel.instance.menuItem = this.menuItem;\n    }\n\n    private watchItemClick(): void {\n        this.clickWatcher$ = this.panel.instance.menuItemClicked.subscribe(\n            emitted => {\n                emitted.callback(this.menuID);\n            }\n        );\n    }\n\n    private displayCallback(): void {\n        this.menuItem.forEach((item, i) => {\n            if (typeof item.display === 'function') {\n                this.menuItem[i].displayCallback = item.display(this.menuID);\n            } else if (typeof item.display === 'boolean') {\n                this.menuItem[i].displayCallback = item.display;\n            } else {\n                this.menuItem[i].displayCallback = true;\n            }\n        });\n    }\n\n    private outsideListener(): void {\n        this.render.listen('document', 'click', event => {\n            if (event.type === 'click' && event.button === 2) {\n                return;\n            }\n            this._service.closeAllContextMenus();\n            this.render.removeClass(this.ref.nativeElement, 'hd-contextmenu-active');\n            this.active = false;\n        });\n    }\n}\n"]}