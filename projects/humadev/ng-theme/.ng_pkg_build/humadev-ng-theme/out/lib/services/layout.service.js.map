{"version":3,"file":"layout.service.js","sourceRoot":"","sources":["layout.service.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,eAAe,EAAE,MAAM,MAAM,CAAC;;AAKvC,MAAM;IASF;yBAPY,IAAI,eAAe,CAAS,EAAE,CAAC;8BAC1B,IAAI,eAAe,CAAU,KAAK,CAAC;0BACvC,IAAI,eAAe,CAAU,KAAK,CAAC;2BAClC,IAAI,eAAe,CAAU,IAAI,CAAC;4BACjC,IAAI,eAAe,CAAU,KAAK,CAAC;gCAC/B,IAAI,eAAe,CAAU,KAAK,CAAC;QAGlD,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;YAChC,IAAI,GAAG,EAAE;gBACL,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACjC;SACJ,CAAC,CAAC;KACN;;;YAlBJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LayoutService {\n\n    pageTitle = new BehaviorSubject<string>('');\n    topProgressBar = new BehaviorSubject<boolean>(false);\n    lockScroll = new BehaviorSubject<boolean>(false);\n    sidebarOpen = new BehaviorSubject<boolean>(true);\n    closeOverlay = new BehaviorSubject<boolean>(false);\n    showNotification = new BehaviorSubject<boolean>(false);\n\n    constructor() {\n        this.closeOverlay.subscribe((res) => {\n            if (res) {\n                this.closeOverlay.next(false);\n            }\n        });\n    }\n}\n"]}