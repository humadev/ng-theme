{"version":3,"file":"breadcrumb.component.js","sourceRoot":"","sources":["breadcrumb.component.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,SAAS,EAAU,MAAM,eAAe,CAAC;AAClD,OAAO,EACL,MAAM,EACN,aAAa,EACb,cAAc,EACd,cAAc,EAEf,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;;;;;;;;;;;;;AA2BxC,MAAM;;;;;IAGJ,YAAoB,MAAc,EAAU,cAA8B;QAAtD,WAAM,GAAN,MAAM,CAAQ;QAAU,mBAAc,GAAd,cAAc,CAAgB;KAAI;;;;IAE9E,QAAQ;;QAEN,IAAI,IAAI,GAAmB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;QACpD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;;QAE7C,IAAI,CAAC,MAAM,CAAC,MAAM;aACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,YAAY,aAAa,CAAC,CAAC;aACrD,SAAS,CAAC,KAAK,CAAC,EAAE;;YAEjB,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;YAChC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SAC9C,CAAC,CAAC;KACN;;;;;;;IAEO,cAAc,CACpB,KAAqB,EACrB,MAAc,EAAE,EAChB,cAA6B,EAAE;;QAE/B,MAAM,qBAAqB,GAAG,MAAM,CAAC;;QAGrC,MAAM,QAAQ,GAAqB,KAAK,CAAC,QAAQ,CAAC;;QAGlD,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YACzB,OAAO,WAAW,CAAC;SACpB;;QAGD,KAAK,MAAM,KAAK,IAAI,QAAQ,EAAE;;YAE5B,IAAI,KAAK,CAAC,MAAM,KAAK,cAAc,EAAE;gBACnC,SAAS;aACV;;YAGD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,EAAE;gBAC9D,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,GAAG,EAAE,WAAW,CAAC,CAAC;aACrD;;YAGD,MAAM,QAAQ,GAAW,KAAK,CAAC,QAAQ,CAAC,GAAG;iBACxC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;iBAC5B,IAAI,CAAC,GAAG,CAAC,CAAC;;YAGb,GAAG,IAAI,IAAI,QAAQ,EAAE,CAAC;;YAGtB,MAAM,UAAU,GAAgB;gBAC9B,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,qBAAqB,CAAC;gBACjD,MAAM,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM;gBAC7B,GAAG,EAAE,GAAG;aACT,CAAC;YACF,IAAI,KAAK,CAAC,QAAQ,CAAC,SAAS,EAAE;gBAC5B,UAAU,CAAC,KAAK,GAAG,MAAM,CAAC;aAC3B;iBAAM;gBACL,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC;aAC/B;YACD,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;;YAG7B,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,GAAG,EAAE,WAAW,CAAC,CAAC;SACrD;QAED,OAAO,WAAW,CAAC;;;;YAzFtB,SAAS,SAAC;gBACT,QAAQ,EAAE,eAAe;gBACzB,QAAQ,EAAE;;;;;;;;;;;;;;OAcL;aACN;;;;YAhCC,MAAM;YAEN,cAAc","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {\n  Router,\n  NavigationEnd,\n  ActivatedRoute,\n  PRIMARY_OUTLET,\n  Params\n} from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\nexport interface IBreadcrumb {\n  label: string;\n  params?: Params;\n  url: string;\n  class?: any;\n}\n\n@Component({\n  selector: 'hd-breadcrumb',\n  template: `\n            <ul class=\"hd-breadcrumb\">\n                  <li><a routerLink=\"\">Home</a></li>\n                  <li *ngFor=\"let breadcrumb of breadcrumbs\">\n                        <a\n                        [routerLink]=\"[breadcrumb.url]\"\n                        *ngIf=\"breadcrumb.class == 'link'; else nonLink\">\n                              {{breadcrumb.label}}\n                        </a>\n                        <ng-template #nonLink>\n                              <span>{{breadcrumb.label}}</span>\n                        </ng-template>\n                  </li>\n            </ul>\n      `\n})\nexport class BreadcrumbComponent implements OnInit {\n  breadcrumbs: IBreadcrumb[];\n\n  constructor(private router: Router, private activatedRoute: ActivatedRoute) {}\n\n  ngOnInit() {\n    // init when refreh page\n    let root: ActivatedRoute = this.activatedRoute.root;\n    this.breadcrumbs = this.getBreadcrumbs(root);\n    // used when navigate trough angular router\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe(event => {\n        // set breadcrumbs\n        root = this.activatedRoute.root;\n        this.breadcrumbs = this.getBreadcrumbs(root);\n      });\n  }\n\n  private getBreadcrumbs(\n    route: ActivatedRoute,\n    url: string = '',\n    breadcrumbs: IBreadcrumb[] = []\n  ): IBreadcrumb[] {\n    const ROUTE_DATA_BREADCRUMB = 'name';\n\n    // get the child routes\n    const children: ActivatedRoute[] = route.children;\n\n    // return if there are no more children\n    if (children.length === 0) {\n      return breadcrumbs;\n    }\n\n    // iterate over each children\n    for (const child of children) {\n      // verify primary route\n      if (child.outlet !== PRIMARY_OUTLET) {\n        continue;\n      }\n\n      // verify the custom data property \"breadcrumb\" is specified on the route\n      if (!child.snapshot.data.hasOwnProperty(ROUTE_DATA_BREADCRUMB)) {\n        return this.getBreadcrumbs(child, url, breadcrumbs);\n      }\n\n      // get the route's URL segment\n      const routeURL: string = child.snapshot.url\n        .map(segment => segment.path)\n        .join('/');\n\n      // append route URL to URL\n      url += `/${routeURL}`;\n\n      // add breadcrumb\n      const breadcrumb: IBreadcrumb = {\n        label: child.snapshot.data[ROUTE_DATA_BREADCRUMB],\n        params: child.snapshot.params,\n        url: url\n      };\n      if (child.snapshot.component) {\n        breadcrumb.class = 'link';\n      } else {\n        breadcrumb.class = 'non-link';\n      }\n      breadcrumbs.push(breadcrumb);\n\n      // recursive\n      return this.getBreadcrumbs(child, url, breadcrumbs);\n    }\n\n    return breadcrumbs;\n  }\n}\n"]}